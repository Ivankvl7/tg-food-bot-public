import asyncio

from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from aiogram.filters import Text
from keyboards import keyboards
from database.database import user_status, cart, states_stack
from lexicon.LEXICON import non_pagination_buttons, command_handlers
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from states.states import FSMBrowsingState

# creating router to navigate common users requests
router: Router = Router()


@router.message(Text('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üìñ'))
async def process_client_account__static_button(message: Message, state: FSMContext):
    user_id: int = message.from_user.id
    states_stack[user_id].append(FSMBrowsingState.browsing_personal_account)
    await state.set_state(FSMBrowsingState.browsing_personal_account)

    await asyncio.sleep(2)
    await message.delete()
    await message.answer(
        text=f"<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {message.from_user.full_name}\n"
             f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_status[user_id]['balance']}\n"
             f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_status[user_id]['delivery address']}\n"
             f"<b>–ó–∞–∫–∞–∑—ã:</b> –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
             f"<b>id:</b> {message.from_user.id}\n"
        ,
        parse_mode="HTML",
        reply_markup=keyboards.create_personal_menu_buttons())


@router.callback_query(Text(text="set_address"), StateFilter(FSMBrowsingState.browsing_personal_account))
async def process_set_address_button(callback: CallbackQuery, state: FSMContext):
    print('inside set address')
    await callback.message.edit_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n'
                                          '–°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞ \n'
                                          '–ù–∞–ø—Ä–∏–º–µ—Ä: –†–§, –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 16, 2',
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[
                                             [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='get_back')]]))
    await state.set_state(FSMBrowsingState.browsing_personal_address)


@router.message(Text('–ë–∞–ª–∞–Ω—Å üí≥'))
async def process_balance_static_button(message: Message, state: FSMContext):
    user_id: int = message.from_user.id
    states_stack[user_id].append(FSMBrowsingState.browsing_static_balance_page)
    await state.set_state(FSMBrowsingState.browsing_static_balance_page)
    await asyncio.sleep(2)
    await message.delete()
    await message.answer(
        text=f"<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {message.from_user.full_name}\n"
             f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_status[user_id]['balance']}\n"
             f"<b>id:</b> {message.from_user.id}\n"
        ,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", callback_data="deposit_funds")],
                             [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_menu_window')]]))


@router.message(Text('–ö–æ—Ä–∑–∏–Ω–∞ üõí'))
async def process_cart_static_button(message: Message, state: FSMContext):
    user_id: int = message.from_user.id
    states_stack[user_id].append(FSMBrowsingState.browsing_static_cart_page)
    await state.set_state(FSMBrowsingState.browsing_static_cart_page)
    await asyncio.sleep(2)
    await message.delete()
    await message.answer(
        text=f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>  üõç"
             f"\n\n{'*' * 20}\n\n".join(
            ['\n'.join([f"<b>{key}:</b> {value}" for key, value in item.__dict__.items()]) for item in cart[user_id]])
             + '\n' * 2 + f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> "
                          f"{float(sum(float(item.price.split()[0]) * item.quantity for item in cart[user_id]))} $",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="finalize_order")],
                             [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_menu_window')]]))


@router.message(Text('–ü–æ–º–æ—â—å üÜò'))
async def process_client_account__static_button(message: Message, state: FSMContext):
    user_id: int = message.from_user.id
    states_stack[user_id].append(FSMBrowsingState.browsing_static_help_page)
    await state.set_state(FSMBrowsingState.browsing_static_help_page)
    await asyncio.sleep(2)
    await message.delete()
    await message.answer(
        text=command_handlers['help'],
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="ask_manager")],
                             [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_menu_window')]]))


@router.callback_query(Text('ask_manager'), StateFilter(FSMBrowsingState.browsing_static_help_page))
async def process_ask_manager_inline_button(callback: CallbackQuery, state: FSMContext):
    user_id: int = callback.from_user.id
    states_stack[user_id].append(FSMBrowsingState.browsing_personal_query_page)
    await state.set_state(FSMBrowsingState.browsing_personal_query_page)
    await asyncio.sleep(2)
    await callback.message.delete()
    await callback.message.answer(
        text='–ù–∞–ø–∏—à–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏'
             ' –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
        parse_mode="HTML",
        # reply_markup=InlineKeyboardMarkup(
        #     inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='get_one_step_back')]])
    )


@router.message(F.text, StateFilter(FSMBrowsingState.browsing_personal_query_page))
async def process_ask_manager_inline_button(message: Message, state: FSMContext):
    user_id: int = message.from_user.id
    await asyncio.sleep(2)
    await message.forward(chat_id=593908084)
    await message.delete()
    await message.answer(
        text='–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n'
             '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π  /start',
        parse_mode="HTML",
        # reply_markup=InlineKeyboardMarkup(
        #     inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='get_one_step_back')]])
    )
    await state.set_state(states_stack[user_id][-1])
    print(states_stack[user_id])
    print(await state.get_state())


@router.callback_query(Text([*[callback_data for callback_data in non_pagination_buttons.values()]]))
async def processing_step_back_from_non_catalog(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    user_id: int = callback.from_user.id
    if states_stack:
        states_stack[user_id].pop(-1)
    if await state.get_state() == FSMBrowsingState.browsing_personal_address:
        await state.set_state(FSMBrowsingState.browsing_personal_account)
        print('handling step back from setting address state')
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –∫–æ–¥ –≤ –æ–¥–Ω—É —Ñ—É–∫–Ω—Ü–∏—é, –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ –Ω–∏–∂–µ
        await callback.message.answer(
            text=f"<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {callback.message.from_user.full_name}\n"
                 f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_status[user_id]['balance']}\n"
                 f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_status[user_id]['delivery address']}\n"
                 f"<b>–ó–∞–∫–∞–∑—ã:</b> –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n",
            parse_mode="HTML",
            reply_markup=keyboards.create_personal_menu_buttons())
    elif await state.get_state() == FSMBrowsingState.finalizing_order:
        await state.set_state(FSMBrowsingState.browsing_static_cart_page)
        await callback.message.answer(
            text=
            f"\n\n{'*' * 20}\n\n".join(
                ['\n'.join([f"<b>{key}:</b> {value}" for key, value in item.__dict__.items()]) for item in
                 cart[user_id]])
            + '\n' * 2 + f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> "
                         f"{float(sum(float(item.price.split()[0]) * item.quantity for item in cart[user_id]))} $",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="finalize_order")],
                                 [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_menu_window')]]))

    else:
        if states_stack[user_id]:
            await state.set_state(states_stack[user_id][-1])
        else:
            await state.clear()
        print('–£–ª–µ—Ç–µ–ª–æ –≤–Ω–∏–∫—É–¥–∞')
    print(await state.get_state())
    print('inside processing_get_back_button')
    print(f" renewed states stack is following {states_stack}")

    # await state.set_state(default_state)


@router.callback_query(StateFilter(*[FSMBrowsingState.browsing_static_cart_page]),
                       Text('finalize_order'))
async def proceed_with_the_order_button(callback: CallbackQuery, state: FSMContext):
    user_id: int = callback.from_user.id
    states_stack[user_id].append(FSMBrowsingState.finalizing_order)
    await state.set_state(FSMBrowsingState.finalizing_order)
    await callback.message.delete()
    await callback.message.answer(text="–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É "
                                       "–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
                                                                             callback_data="confirm order")],
                                                       [InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                             callback_data="get_back")]]))
@router.callback_query(StateFilter(*[FSMBrowsingState.finalizing_order]),
                       Text('confirm order'))
async def proceed_with_the_order_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(text="–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")